"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgsServiceDashboard = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
const cdk = require("aws-cdk-lib");
const cw = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
class AgsServiceDashboard extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.keyMetrics = new Map();
        const dashboard = new cw.Dashboard(this, `${props.serviceName}-dashboard`, {
            dashboardName: props.dashboardName,
        });
        // canary and api gateway widgets
        if (props.apiGateway) {
            dashboard.addWidgets(...this.createApiWidgets(props.apiGateway, props.canaryName));
        }
        // lambda widgets
        dashboard.addWidgets(...props.lambdas
            .map((lambda) => this.createLambdaWidgets(lambda))
            .reduce((previous, current) => previous.concat(current)));
        // dynamo db
        if (props.dynamoDbTables && props.dynamoDbTables.length > 0) {
            dashboard.addWidgets(...props.dynamoDbTables
                .map((table) => this.createDynamoDbWidgets(table))
                .reduce((previous, current) => previous.concat(current)));
        }
        if (props.additionalWidgets && props.additionalWidgets.length > 0) {
            dashboard.addWidgets(...props.additionalWidgets);
        }
        this.dashboard = dashboard;
    }
    createLambdaWidgets(lambda) {
        var _a;
        const prefix = (_a = lambda.friendlyName) !== null && _a !== void 0 ? _a : lambda.functionName;
        const successRateMetrics = this.createSuccessRateMetrics(lambda);
        const maximumDurationMetrics = this.lambdaMetric(lambda, 'Maximum', 'Duration', cw.Statistic.MAXIMUM, cw.Unit.MILLISECONDS);
        const averageDurationMetrics = this.lambdaMetric(lambda, 'Average', 'Duration', cw.Statistic.AVERAGE, cw.Unit.MILLISECONDS);
        const minDurationMetrics = this.lambdaMetric(lambda, 'Minimum', 'Duration', cw.Statistic.MINIMUM, cw.Unit.MILLISECONDS);
        this.keyMetrics.set('SUCESS_RATE', successRateMetrics);
        return [
            this.lambdaWidget(`${prefix} - Duration`, [
                minDurationMetrics,
                maximumDurationMetrics,
                averageDurationMetrics,
            ]),
            this.createGraphWidget({
                title: `${prefix} -  Success Rate`,
                left: [successRateMetrics],
                leftYAxis: { max: 100, min: 0, label: 'Percent', showUnits: false },
            }),
        ];
    }
    createSuccessRateMetrics(lambda) {
        const invocations = this.lambdaMetric(lambda, 'Invocations', 'Invocations', cw.Statistic.SUM, cw.Unit.COUNT);
        const errorCount = this.lambdaMetric(lambda, 'Error', 'Errors', cw.Statistic.SUM, cw.Unit.COUNT);
        const successRateMetrics = new cw.MathExpression({
            expression: '100 - 100 * errors / MAX([errors, invocations])',
            usingMetrics: {
                errors: errorCount,
                invocations: invocations,
            },
            period: cdk.Duration.minutes(5),
            label: 'Success rate',
        });
        return successRateMetrics;
    }
    createApiWidgets(apg, canaryName) {
        const metrics = [];
        if (canaryName) {
            metrics.push(this.apiGatewayWidget('Canary Status', [
                this.createGraphMetric({
                    metricName: 'SuccessPercent',
                    namespace: 'CloudWatchSynthetics',
                    label: 'Canary Status',
                    statistic: cw.Statistic.AVERAGE,
                    unit: cw.Unit.PERCENT,
                    dimensionsMap: { CanaryName: canaryName },
                }),
            ]));
        }
        metrics.push(this.apiGatewayWidget('API Invocation', apg.endpoints.map((api) => {
            var _a;
            return this.apiGatewayMetric(apg.apiName, (_a = api.friendlyName) !== null && _a !== void 0 ? _a : `${api.method} ${api.resource}`, 'Count', cw.Statistic.SUM, cw.Unit.COUNT, api.method, api.resource);
        })), this.apiGatewayWidget('API Latency', apg.endpoints.map((api) => {
            var _a;
            return this.apiGatewayMetric(apg.apiName, (_a = api.friendlyName) !== null && _a !== void 0 ? _a : `${api.method} ${api.resource}`, 'Latency', cw.Statistic.AVERAGE, cw.Unit.MILLISECONDS, api.method, api.resource);
        })), this.apiGatewayWidget('API Errors', apg.endpoints.map((api) => {
            var _a;
            return this.apiGatewayMetric(apg.apiName, (_a = api.friendlyName) !== null && _a !== void 0 ? _a : `${api.method} ${api.resource}`, '4XXError', cw.Statistic.SUM, cw.Unit.COUNT, api.method, api.resource);
        }), apg.endpoints.map((api) => {
            var _a;
            return this.apiGatewayMetric(apg.apiName, (_a = api.friendlyName) !== null && _a !== void 0 ? _a : `${api.method} ${api.resource}`, '5XXError', cw.Statistic.SUM, cw.Unit.COUNT, api.method, api.resource);
        }), '4XX Errors', '5XX Errors'));
        return metrics;
    }
    lambdaWidget(title, metrics) {
        return this.createGraphWidget({ title, left: metrics });
    }
    lambdaMetric(lambda, label, metricName, statistic, unit) {
        return this.createGraphMetric({
            label,
            metricName,
            namespace: 'AWS/Lambda',
            statistic,
            unit,
            dimensionsMap: { FunctionName: lambda.functionName },
        });
    }
    createDynamoDbWidgets(dynamoDbTable) {
        var _a;
        const prefix = (_a = dynamoDbTable.friendlyTableName) !== null && _a !== void 0 ? _a : dynamoDbTable.tableName;
        return [
            this.ddbWidget(`${prefix} - Capacity`, [
                this.ddbMetric(dynamoDbTable.tableName, 'Provisioned Read', 'ProvisionedReadCapacityUnits', cw.Statistic.AVERAGE, cw.Unit.COUNT),
                this.ddbMetric(dynamoDbTable.tableName, 'Consumed Read', 'ConsumedReadCapacityUnits', cw.Statistic.AVERAGE, cw.Unit.COUNT),
                this.ddbMetric(dynamoDbTable.tableName, 'Provisioned Read', 'ProvisionedWriteCapacityUnits', cw.Statistic.AVERAGE, cw.Unit.COUNT),
                this.ddbMetric(dynamoDbTable.tableName, 'Consumed Read', 'ConsumedWriteCapacityUnits', cw.Statistic.AVERAGE, cw.Unit.COUNT),
            ]),
            this.ddbWidget(`${prefix} - Latency`, [
                this.ddbMetric(dynamoDbTable.tableName, 'Get Latency', 'SuccessfulRequestLatency', cw.Statistic.AVERAGE, cw.Unit.MILLISECONDS, { Operation: 'GetItem' }),
                this.ddbMetric(dynamoDbTable.tableName, 'Put Latency', 'SuccessfulRequestLatency', cw.Statistic.AVERAGE, cw.Unit.MILLISECONDS, { Operation: 'PutItem' }),
                this.ddbMetric(dynamoDbTable.tableName, 'Scan Latency', 'SuccessfulRequestLatency', cw.Statistic.AVERAGE, cw.Unit.MILLISECONDS, { Operation: 'Scan' }),
                this.ddbMetric(dynamoDbTable.tableName, 'Query Latency', 'SuccessfulRequestLatency', cw.Statistic.AVERAGE, cw.Unit.MILLISECONDS, { Operation: 'Query' }),
            ]),
            this.ddbWidget(`${prefix} - Errors`, [
                this.ddbMetric(dynamoDbTable.tableName, 'Get', 'SystemErrors', cw.Statistic.SUM, cw.Unit.COUNT, {
                    Operation: 'GetItem',
                }),
                this.ddbMetric(dynamoDbTable.tableName, 'Batch Get', 'SystemErrors', cw.Statistic.SUM, cw.Unit.COUNT, {
                    Operation: 'BatchGetItem',
                }),
                this.ddbMetric(dynamoDbTable.tableName, 'Scan', 'SystemErrors', cw.Statistic.SUM, cw.Unit.COUNT, {
                    Operation: 'Scan',
                }),
                this.ddbMetric(dynamoDbTable.tableName, 'Query', 'SystemErrors', cw.Statistic.SUM, cw.Unit.COUNT, {
                    Operation: 'Query',
                }),
                this.ddbMetric(dynamoDbTable.tableName, 'Put', 'SystemErrors', cw.Statistic.SUM, cw.Unit.COUNT, {
                    Operation: 'PutItem',
                }),
                this.ddbMetric(dynamoDbTable.tableName, 'Batch Write', 'SystemErrors', cw.Statistic.SUM, cw.Unit.COUNT, {
                    Operation: 'BatchWriteItem',
                }),
                this.ddbMetric(dynamoDbTable.tableName, 'Update', 'SystemErrors', cw.Statistic.SUM, cw.Unit.COUNT, {
                    Operation: 'UpdateItem',
                }),
                this.ddbMetric(dynamoDbTable.tableName, 'Delete', 'SystemErrors', cw.Statistic.SUM, cw.Unit.COUNT, {
                    Operation: 'DeleteItem',
                }),
            ]),
            this.ddbWidget(`${prefix} - Throttled Requests`, [
                this.ddbMetric(dynamoDbTable.tableName, 'Throttled Requests', 'ThrottledRequests', cw.Statistic.SUM, cw.Unit.COUNT),
            ]),
        ];
    }
    ddbMetric(tableName, label, metricName, statistic, unit, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    dimensions) {
        return this.createGraphMetric({
            label,
            metricName,
            statistic,
            namespace: 'AWS/DynamoDB',
            unit,
            dimensionsMap: { ...dimensions, TableName: tableName },
        });
    }
    ddbWidget(title, metrics) {
        return this.createGraphWidget({ title, left: metrics });
    }
    apiGatewayWidget(title, leftMetrics, rightMetrics, leftLabel, rightLabel) {
        return this.createGraphWidget({
            title,
            left: leftMetrics,
            right: rightMetrics,
            leftYAxis: { label: leftLabel },
            rightYAxis: { label: rightLabel },
        });
    }
    apiGatewayMetric(apiName, label, metricName, statistic, unit, method, resource, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    dimensions) {
        return this.createGraphMetric({
            label,
            metricName,
            statistic,
            unit,
            namespace: 'AWS/ApiGateway',
            dimensionsMap: {
                ...dimensions,
                ApiName: apiName,
                Stage: 'prod',
                Method: method,
                Resource: resource,
            },
        });
    }
    createGraphWidget(props) {
        return new cw.GraphWidget({ height: 6, width: 6, liveData: true, ...props });
    }
    createGraphMetric(props) {
        return new cw.Metric(props);
    }
}
exports.AgsServiceDashboard = AgsServiceDashboard;
//# sourceMappingURL=data:application/json;base64,