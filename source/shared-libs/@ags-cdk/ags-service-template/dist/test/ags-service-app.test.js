"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
const cdk = require("@aws-cdk/core");
const ssm = require("@aws-cdk/aws-ssm");
const ags_service_stage_1 = require("../lib/ags-service-stage");
const ags_service_app_1 = require("../lib/ags-service-app");
class TestStackOne extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        new ssm.StringParameter(this, 'TestParamsStackOne', {
            stringValue: 'Test Value Stack One',
        });
    }
}
class TestStackTwo extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        new ssm.StringParameter(this, 'TestParamsStackTwo', {
            stringValue: 'Test Value Stack Two',
        });
    }
}
class SingleStackTestStage extends ags_service_stage_1.AGSServiceStage {
    constructor(scope, id, props) {
        super(scope, id, props);
        super.addStack(TestStackOne, '', {});
    }
}
class MultiStackTestStage extends ags_service_stage_1.AGSServiceStage {
    constructor(scope, id, props) {
        super(scope, id, props);
        super.addStack(TestStackOne, 'TestStackOne', {});
        super.addStack(TestStackTwo, 'TestStackTwo', {});
    }
}
test('AGSService App Snapshot Test', () => {
    // WHEN
    const app = new ags_service_app_1.AGSServiceApp({
        stageConstructor: SingleStackTestStage,
        context: {
            serviceName: 'TestService',
            personal: 'off',
            targetEnvs: {
                Test1: {
                    account: '12345',
                    region: 'ap-southeast-2',
                },
            },
        },
    });
    // THEN
    const cloudAssembly = app.synth();
    expect(cloudAssembly.nestedAssemblies.length).toBe(1);
    expect(cloudAssembly.nestedAssemblies[0].displayName).toBe('Test1Stage');
    expect(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks.length).toBe(1);
    expect(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks[0].stackName).toBe('TestService');
    expect(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks[0].template).toMatchSnapshot();
});
test('AGSService Stage can load multi stack', () => {
    // WHEN
    const app = new ags_service_app_1.AGSServiceApp({
        stageConstructor: MultiStackTestStage,
        context: {
            serviceName: 'TestService',
            personal: 'off',
            targetEnvs: {
                Test1: {
                    account: '12345',
                    region: 'ap-southeast-2',
                },
            },
        },
    });
    // THEN
    const cloudAssembly = app.synth({ force: true });
    console.log(JSON.stringify(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks[0].template));
    console.log(JSON.stringify(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks[1].template));
    expect(cloudAssembly.nestedAssemblies.length).toBe(1);
    expect(cloudAssembly.nestedAssemblies[0].displayName).toBe('Test1Stage');
    expect(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks.length).toBe(2);
    expect(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks[0].stackName).toBe('TestService-TestStackOne');
    expect(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks[1].stackName).toBe('TestService-TestStackTwo');
    expect(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks[0].template).toMatchSnapshot();
    expect(cloudAssembly.nestedAssemblies[0].nestedAssembly.stacks[1].template).toMatchSnapshot();
});
//# sourceMappingURL=data:application/json;base64,