"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AGSSharedInfraClient = void 0;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const ssm = require("aws-cdk-lib/aws-ssm");
const constructs_1 = require("constructs");
// SSM Parameter Names
const SSM_DEPLOYMENT_OPTIONS = '/ags/deploymentOptions';
const SSM_VPC_ID = '/ags/vpcId';
const SSM_VPC_ENDPOINT_ID = '/ags/apigatewayVpcEndpointId';
const SSM_PERMISSION_BOUNDARY_POLICY_ARN = '/ags/permissionBoundaryPolicyArn';
const SSM_WEB_DIST_ID = '/ags/webClientDistributionId';
const SSM_SUBNET_MAPPING = '/ags/subnetmapping';
const SSM_ES_SERVICE_LINKED_ROLE_AVILABLE = '/ags/elasticSearchServiceLinkedRoleAvailable';
const SSM_CUSTOM_API_RESOURCE_POLICY = '/ags/customAPIResourcePolicyJSON';
const SSM_API_WEB_ACL_ARN = '/ags/apigatewayWebAclArn';
class AGSSharedInfraClient extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.deploymentOptions = this.readJSONParameter(SSM_DEPLOYMENT_OPTIONS, {
            apiGatewayType: 'private',
            bastionInstance: false,
            developmentUserRole: true,
            trustedDeveloperAccounts: '',
        });
        this.trustedDeveloperAccounts = (this.deploymentOptions.trustedDeveloperAccounts || '').split(',');
        this.customAPIResourcePolicyJSON = this.readStringParameter(SSM_CUSTOM_API_RESOURCE_POLICY, 'NONE');
        // lookup vpc
        const vpcId = ssm.StringParameter.valueFromLookup(this, SSM_VPC_ID);
        this.vpc = aws_ec2_1.Vpc.fromLookup(this, 'vpc', {
            vpcId,
        });
        // look up apigatewayVpcEndpointId only when APIGateway is in private setting
        if (this.deploymentOptions.apiGatewayType === 'private') {
            const vpcEndpointId = ssm.StringParameter.valueFromLookup(this, SSM_VPC_ENDPOINT_ID);
            this.apigatewayVpcEndpoint =
                aws_ec2_1.InterfaceVpcEndpoint.fromInterfaceVpcEndpointAttributes(this, 'apigatewayVpcEndpoint', {
                    vpcEndpointId,
                    port: 443,
                });
        }
        // look up permission boundary policy arn from shared infra
        const policyArn = ssm.StringParameter.valueFromLookup(this, SSM_PERMISSION_BOUNDARY_POLICY_ARN);
        this.permissionBoundaryPolicyArn = /arn:aws:iam::[0-9]+:policy\/.+/.test(policyArn)
            ? policyArn
            : '';
        // look up web distribution id
        this.webDistributionId = ssm.StringParameter.valueFromLookup(this, SSM_WEB_DIST_ID);
        // look up subnet mapping
        const subnetMappingOptions = this.readJSONParameter(SSM_SUBNET_MAPPING, {
            ingress: {
                subnetGroupName: 'ingress',
                securityGroupIds: [],
            },
            service: {
                subnetGroupName: 'service',
                securityGroupIds: [],
            },
            database: {
                subnetGroupName: 'database',
                securityGroupIds: [],
            },
        });
        this.subnetMapping = {
            ingress: this.getSubnetSecurityGroupMapping(subnetMappingOptions.ingress),
            service: this.getSubnetSecurityGroupMapping(subnetMappingOptions.service),
            database: this.getSubnetSecurityGroupMapping(subnetMappingOptions.database),
        };
        const esServiceLinkedRoleFlag = ssm.StringParameter.valueFromLookup(this, SSM_ES_SERVICE_LINKED_ROLE_AVILABLE);
        this.elasticSearchServiceLinkedRoleAvailable =
            esServiceLinkedRoleFlag.toLowerCase() === 'true';
        this.apiGatewayWebAclArn = ssm.StringParameter.valueFromLookup(this, SSM_API_WEB_ACL_ARN);
    }
    getSubnetSecurityGroupMapping(mapping) {
        return {
            subnetGroupName: mapping.subnetGroupName,
            securityGroups: mapping.securityGroupIds.length > 0
                ? mapping.securityGroupIds.map((id) => aws_ec2_1.SecurityGroup.fromSecurityGroupId(this, `sg-${id}`, id, {
                    allowAllOutbound: false,
                    mutable: false,
                }))
                : undefined,
        };
    }
    getSubnetsByGroupName(subnetGroupName) {
        return {
            subnetGroupName: this.subnetMapping[subnetGroupName].subnetGroupName,
        };
    }
    getSubnetSecurityGroups(subnetGroupName) {
        return this.subnetMapping[subnetGroupName].securityGroups;
    }
    /**
     * Read JSON string stored in SSM ParameterStore and return object
     *
     * This function returns a default value if the value returned from `ssm.StringParameter.valueFromLookup` is an token
     * so that the synth process can continue. It happens when cdk doesn't have this ssm parameter cached in cdk.context.json
     *
     * During cdk synth time, SSM parameter values could be resolved into token first
     * before the real string value is fetched from the server. Once the value is fetched
     * it will be stored in cdk.context.json.
     *
     * CDK will run the same stack a few passes during the synth. The token will only
     * be resolved in the real string in the later passes but not the first pass.
     *
     * If the SSM parameter value need to be parsed and used in the stack code, the
     * stack code will only get the token in first pass and will fail and thus
     * prevent the stack synth to be completed.
     *
     * The workaround is to run cdk synth twice, with refreshContext flag in the
     * first time. When this flag is set, the stack should run some special code
     * which only retrieve SSM parameters. This will force cdk to retrieve it from
     * the environment and store it in cdk.context.json. The stack code should not
     * parse or interprete the value.
    
     * After the first synth completed (with only the SSM parameters in the stack),
     * run cdk synth again without setting this flag (refreshContext). The second
     * cdk synth will read the SSM parameter values from cdk.context.json and will pass.
     *
     * @param parameterName Name of the SSM parameter
     * @param defaultValue The default value of this SSM parameter if the value is not retrieve yet.
     * @returns JSON Object that stored in this SSM paramter or the default value
     */
    readJSONParameter(parameterName, defaultValue) {
        const value = ssm.StringParameter.valueFromLookup(this, parameterName);
        if (value === `dummy-value-for-${parameterName}`) {
            return defaultValue;
        }
        else {
            return JSON.parse(value);
        }
    }
    readStringParameter(parameterName, defaultValue) {
        const value = ssm.StringParameter.valueFromLookup(this, parameterName);
        if (value === `dummy-value-for-${parameterName}`) {
            return defaultValue;
        }
        else {
            return value;
        }
    }
}
exports.AGSSharedInfraClient = AGSSharedInfraClient;
//# sourceMappingURL=data:application/json;base64,